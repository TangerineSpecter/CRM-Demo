<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tangerineSpecter.crm.mapper.EmployeeMapper" >
  <resultMap id="BaseResultMap" type="com.tangerineSpecter.crm.domain.Employee" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="realname" property="realname" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="phone_number" property="phoneNumber" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="input_time" property="inputTime" jdbcType="DATE" />
    <result column="status" property="status" jdbcType="BIT" />
    <result column="admin" property="admin" jdbcType="BIT" />
    <association property="dept" javaType="com.tangerineSpecter.crm.domain.Department" columnPrefix="d_">
    	<id column="id" property="id"/>
    	<result column="name" property="name"/>
    </association>
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from employee
    where id = #{id}
  </delete>
  <insert id="insert" parameterType="com.tangerineSpecter.crm.domain.Employee" useGeneratedKeys="true" keyProperty="id" >
    insert into employee (username, realname, password, 
      phone_number, email, dept_id, 
      input_time, status, admin)
    values (#{username}, #{realname}, #{password}, 
      #{phoneNumber}, #{email}, #{dept.id}, 
      #{inputTime}, #{status}, #{admin})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.tangerineSpecter.crm.domain.Employee" >
    update employee
    set username = #{username},
      realname = #{realname},
      password = #{password},
      phone_number = #{phoneNumber},
      email = #{email},
      dept_id = #{dept.id},
      input_time = #{inputTime},
      status = #{status},
      admin = #{admin}
    where id = #{id}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select id, username, realname, password, phone_number, email, dept_id, input_time, 
    status, admin
    from employee
    where id = #{id}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select id, username, realname, password, phone_number, email, dept_id, input_time, 
    status, admin
    from employee
  </select>
  <select id="getEmployeeForLogin" resultMap="BaseResultMap">
  	select * from employee where username = #{username} and password = #{password}
  </select>
  <sql id="where_sql"/>
  <select id="queryForPage" resultMap="BaseResultMap">
  	select e.id, e.username, e.realname, e.phone_number, e.email, e.input_time, e.status, e.admin,
  	d.id as d_id, d.name as d_name
  	from employee e
  	left join department d
  	on d.id = e.dept_id
  	<include refid="where_sql"></include>
  </select>
  <select id="queryForPageCount" resultType="long">
  	select Count(*) from employee
  	<include refid="where_sql"></include>
  	<if test="page!=null">
  		limit #{start},#{rows}
  	</if>
  </select>
</mapper>